"""Travelling Expense"""
from Tkinter import *
import webbrowser
class Window():
    '''create window'''
    # Window1 #
    def __init__(expense):
        """create main window"""
        expense.root = Tk()
        menubar = Menu(expense.root)
        expense.root.title("Travelling Expense")
        expense.root.geometry("360x240")
        # Label Window1 #
        expense.label = Label(expense.root, text="▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀",fg="#00CCCC" \
                              , font=("Helvetica", 13)).pack(anchor=CENTER)
        expense.label = Label(expense.root, text=":.｡.✿ﾟ|͇̿T͇̿|ravelling |͇̿E͇̿|xpense✿.｡.:"\
                              , fg="#FF6666", font=("Helvetica", 18)).pack(anchor=CENTER)
        expense.label = Label(expense.root, text="      ", font=("Helvetica", 30)).pack(anchor=CENTER)
        expense.label = Label(expense.root, text='''|----------------------------|''' \
                              , fg="#8B4513", font=("Helvetica", 13)).pack()
        expense.label = Label(expense.root, text='''............|.....LET ~ > "GO!!" .....|||"|""____''' \
                              , fg="#8B4513", font=("Helvetica", 13)).pack()
        expense.label = Label(expense.root, text='''...........|__________________ |||_|___|)''' \
                              , fg="#8B4513", font=("Helvetica", 13)).pack()
        expense.label = Label(expense.root, text='''...........!(@)"(@)""""**!(@)(@)***!(@)""''' \
                              ,fg="#110000", font=("Helvetica", 13)).pack()
        # Button Window1 #
        expense.buttontext = IntVar()
        expense.buttontext.set("Let Go!!")
        Button(expense.root, font=("Helvetica", 12), fg="red", bg="black", command=expense.data1 \
               , textvariable=expense.buttontext).place(relx=0.5, rely=0.37, anchor=CENTER)
        expense.label = Label(expense.root, text="▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀",fg="#00CCCC" \
                              ,font=("Helvetica", 13)).pack(anchor=CENTER)
        # Function Menu #
        def close():
            '''close the program'''
            expense.root.destroy()
        def instruc():
            """create the window that show instruction"""
            root = Tk()
            root.geometry("400x130")
            root.title('Instruction')
            label = Label(root, text=":.｡.✿Instruction✿.｡.:"\
                          , fg="#663366", font=("Helvetica", 15)).pack(anchor=CENTER)
            label = Label(root, text="1. Select the province to travel."\
                          , fg="#110000", font=("Helvetica", 11)).pack(anchor=CENTER)
            label = Label(root, text="2. Select the type of vehicle."\
                          , fg="#110000", font=("Helvetica", 11)).pack(anchor=CENTER)
            label = Label(root, text="3. Select fuel to travel and price."\
                          , fg="#110000", font=("Helvetica", 11)).pack(anchor=CENTER)
            label = Label(root, text="The program calculates the distance , fuel, energy, and cost."\
                          , fg="#110000", font=("Helvetica", 11)).pack(anchor=CENTER)
            root.mainloop()

        def about():
            """create the window that show about program"""
            root = Tk()
            root.geometry("400x80")
            root.title('About')
            label = Label(root, text=":.｡.✿About✿.｡.:"\
                              , fg="#FF3333", font=("Helvetica", 15)).pack(anchor=CENTER)
            label = Label(root, text="The program calculates the distance, fuel, energy, and cost."\
                              , fg="#110000", font=("Helvetica", 11)).pack(anchor=CENTER)
            label = Label(root, text="Kingkarn Parod 57070005 and Bencharat Rotkorn 57070063"\
                              , fg="#110000", font=("Helvetica", 8)).pack(anchor=CENTER)
            root.mainloop()

        # Menu Bar #
        filemenu = Menu(menubar, tearoff=0)
        filemenu.add_separator()
        filemenu.add_command(label="Exit",command=close)
        menubar.add_cascade(label="File",menu=filemenu)
        helpmenu = Menu(menubar, tearoff=0)
        helpmenu.add_command(label="Instruction",command=instruc)
        helpmenu.add_separator()
        helpmenu.add_command(label="About",command=about)
        menubar.add_cascade(label="Help", menu=helpmenu)
        # display the menu
        expense.root.config(menu=menubar)
        expense.root.mainloop()
    # Open Window2 #
    def data1(datastep1):
        """create secondary window"""
        # Window2 #
        datastep1.root = Tk()
        menubar = Menu(datastep1.root)
        datastep1.root.geometry("500x600")
        datastep1.root.title('Travelling Expense')
        # Label Window2 #
        datastep1.label = Label(datastep1.root, font=("Helvetica", 13), fg="#00CCCC" \
                                , text="▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀").pack(anchor=CENTER)
        datastep1.label = Label(datastep1.root, text=":.｡.✿ﾟ|͇̿T͇̿|ravelling |͇̿E͇̿|xpense✿.｡.:" \
                              , fg="#FF6666", font=("Helvetica", 18)).pack(anchor=CENTER)
        datastep1.label = Label(datastep1.root, text=":.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿" \
                                , fg="#FF6666",font=("Helvetica", 11)).pack(anchor=CENTER)        
        datastep1.label = Label(datastep1.root, text="From Bangkok To :" \
                              , fg="#8B4513", font=("Helvetica", 13)).place(relx=0.26, rely=0.15, anchor=CENTER)
        # Province or end #
        datastep1.variable1 = StringVar(datastep1.root)
        datastep1.variable1.set("     Provinces       ") # default value
        province = OptionMenu(datastep1.root, datastep1.variable1, \
                        "Chiangrai", "Chiangmai", "Nan", "Phayao", "Phrae", \
                        "Maehongson", "Lampang", "Lamphun", "Uttaradit", "Kalasin", \
                        "Khonkaen", "Chaiyaphum", "Nakhonphanom", "Nakhonratchasima", \
                        "BuengKan", "Buriram", "Mahasarakham", "Mukdahan", "Yasothon", \
                        "Roiet", "Loei", "Sisaket", "Sakonnakhon", "Surin", \
                        "Nongkhai", "Nongbualamphu", "Amnatcharoen", "Udonthani", \
                        "Ubonratchathani", "Kamphaengphet", "Chainat", "Nakhonnayok", \
                        "Nakhonpathom", "Samutsakhon", "Singburi", "Suphanburi", \
                        "Saraburi", "Angthong", "Nakhonsawan", "Nonthaburi", "Pathumthani", \
                        "Phranakhonsiayutthaya", "Sukhothai", "Uthaithani", "Phichit", \
                        "Phitsanulok", "Phetchabun", "Lopburi", "Samutprakan", "Samutsongkhram", \
                        "Chanthaburi", "Chachoengsao", "Chonburi", "Trat", "Prachinburi", \
                        "Rayong", "Sakaeo", "Kanchanaburi", "Tak", "Prachuapkhirikhan", \
                        "Phetchaburi", "Ratchaburi", "Krabi", "Chumphon", "Trang", \
                        "Nakhonsithammarat", "Narathiwat", "Pattani", "Phangnga", \
                        "Phatthalung", "Phuket", "Yala", "Ranong", "Songkhla", \
                        "Satun", "Suratthani").place(relx=0.53, rely=0.15, anchor=CENTER)
        
        # Car Type or car #
        datastep1.label = Label(datastep1.root, text="         Type of car :" \
                              , fg="#8B4513", font=("Helvetica", 13)).place(relx=0.26, rely=0.23, anchor=CENTER)
        datastep1.variable2 = StringVar(datastep1.root)
        datastep1.variable2.set("          select          ") # default value
        cartype = OptionMenu(datastep1.root, datastep1.variable2, \
                        "Midsize car", "Pickups", "Truck 6 wheel", "Truck 10 wheel", \
                        "Motorcycles").place(relx=0.53, rely=0.23, anchor=CENTER)
        datastep1.label = Label(datastep1.root, text="##Motorcycles must not is 'NGV','LPG','Diesel##'" \
                        ,fg="#EE0000",font=("Helvetica", 9)).place(relx=0.5, rely=0.27,anchor=CENTER)

        # Oil Type or oil #
        datastep1.label = Label(datastep1.root, text="       Type of fule :" \
                              , fg="#8B4513", font=("Helvetica", 13)).place(relx=0.26, rely=0.32, anchor=CENTER)
        datastep1.variable3 = StringVar(datastep1.root)
        datastep1.variable3.set("          select          ") # default value
        oil = OptionMenu(datastep1.root, datastep1.variable3, \
                        "Gasohol 95-E10", "Gasohol 95-E20", "Gasohol 95-E85", "Gasohol 91-E10", \
                        "Gasoline 95", "Diesel", "NGV", "LPG").place(relx=0.53, rely=0.32,anchor=CENTER)

        #Price of fuel #
        datastep1.group1 = LabelFrame(datastep1.root,padx=45,pady=10)
        datastep1.group1.place(relx=0.5, rely=0.43,anchor=CENTER)
        datastep1.p_oil = Label(datastep1.group1, text="Price of fuel ").pack(anchor=CENTER)
        datastep1.price = StringVar(datastep1.root)
        datastep1.price.set('0.00')
        Entry(datastep1.group1, textvariable=datastep1.price).pack(anchor=CENTER)

        # Button Window 2 #
        button = Button(datastep1.root, text="Check price", bg="#1112ff", command=datastep1.check_p).place(relx=0.5, rely=0.5,anchor=CENTER)

        # OK Botton link function #    
        datastep1.label = Label(datastep1.root, text="▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀",fg="#00CCCC" \
                              ,font=("Helvetica", 8)).place(relx=0.5, rely=0.55,anchor=CENTER)
        button = Button(datastep1.root, text="                       OK                       " \
                        , bg="#8B658B", command=datastep1.check_input).place(relx=0.45, rely=0.59,anchor=CENTER) 
        button = Button(datastep1.root, text="Reset", bg="red", command=datastep1.reset).place(relx=0.67, rely=0.59,anchor=CENTER)
        datastep1.label = Label(datastep1.root, text="▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀",fg="#00CCCC" \
                              , font=("Helvetica", 8)).place(relx=0.5, rely=0.63,anchor=CENTER)
        datastep1.label = Label(datastep1.root, text=":.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿:.｡.✿" \
                                , fg="#FF6666",font=("Helvetica", 11)).place(relx=0.5, rely=0.67,anchor=CENTER)
    # Small function #
    def check_p(datastep1):
        '''link wepsite for check price of fuel'''
        webbrowser.open("http://www.eppo.go.th/retail_prices.html")

    def check_input(datastep1):
        '''check data that user input,full and correct,yes or on'''
        if datastep1.variable1.get() == "     Provinces       " or datastep1.variable2.get()== \
           "          select          " or datastep1.variable3.get()== \
           "          select          " or datastep1.price.get() == "0.00":
            datastep1.on_data()
        else:
            datastep1.ok1()

    def reset(datastep1):
        '''program will return The default value'''
        datastep1.root.destroy()
        datastep1.data1()

    def on_data(datastep1):
        '''input is not full this promgram will show the warning messages'''
        datastep1.on = Label(datastep1.root, text="Program can not calculate because your data incorrect." \
                             , font='Helvetica 13',fg="#EE0000").place(relx=0.5, rely=0.7,anchor=CENTER)
        datastep1.label = Label(datastep1.root, text="▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀",fg="#EE6363" \
                              ,font=("Helvetica", 13)).place(relx=0.5, rely=0.74,anchor=CENTER)

    def ok1(datastep1):
        '''return the values obtained from the calculation.'''
        result = Price(datastep1.variable1.get(),datastep1.variable2.get(), \
                       datastep1.variable3.get(),datastep1.price.get())
        call_result1 = result.print_dist()
        call_result2 = result.print_car()
        call_result3 = result.print_oil()
        call_result4 = result.print_use()
        call_result5 = result.print_pay()
        datastep1.dist = Label(datastep1.root, text='Distance :   '+str(call_result1)+'   km.', \
                               font='Helvetica 13').place(relx=0.5, rely=0.73,anchor=CENTER)
        datastep1.oil = Label(datastep1.root, text='Car use :   '+str(call_result2)+'   km/l.', \
                            font='Helvetica 13').place(relx=0.5, rely=0.78,anchor=CENTER)
        datastep1.car = Label(datastep1.root, text='Price of fuel :   '+str(call_result3)+ \
                            '   bath/l.', font='Helvetica 13').place(relx=0.5, rely=0.83,anchor=CENTER)
        datastep1.use = Label(datastep1.root, text='Quantity of fuel to be used :   '+ \
                            str('%.2f'%call_result4)+'   liter.',font='Helvetica 13').place(relx=0.5, rely=0.88,anchor=CENTER)
        datastep1.pay = Label(datastep1.root, text='The total amount :   '+str('%.2f'%call_result5)+ \
                            '   bath.', font='Helvetica 13').place(relx=0.5, rely=0.93,anchor=CENTER)
        datastep1.label = Label(datastep1.root, text="▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀▄▀", \
                              fg="#EE6363", font=("Helvetica", 11)).place(relx=0.5,rely=0.97,anchor=CENTER)
class Price():
    '''create the calculation'''
    def __init__(self, province, car, oil, price_oil):
        '''create attribute'''
        self.province = province
        self.oil = oil
        self.car = car
        self.price_oil = float(price_oil) 
    def print_dist(self):
        '''return the distance'''
        lis_provinces = {"Chiangrai":838, "Chiangmai":706, "Nan":675, "Phayao":706, "Phrae":557, \
                            "Maehongson":936, "Lampang":613, "Lamphun":674, "Uttaradit":493, "Kalasin":543, \
                            "Khonkaen":475, "Chaiyaphum":359, "Nakhonphanom":761, "Nakhonratchasima":283, \
                            "BuengKan":751, "Buriram":410, "Mahasarakham":497, "Mukdahan":703, "Yasothon":555, \
                            "Roiet":533, "Loei":558, "Sisaket":561, "Sakonnakhon":671, "Surin":457, \
                            "Nongkhai":654, "Nongbualamphu":554, "Amnatcharoen":617, "Udonthani":601, \
                            "Ubonratchathani":627, "Kamphaengphet":374, "Chainat":204, "Nakhonnayok":107, \
                            "Nakhonpathom":57, "Samutsakhon":38, "Singburi":149, "Suphanburi":129, \
                            "Saraburi":116, "Angthong":114, "Nakhonsawan":248, "Nonthaburi":30, "Pathumthani":42, \
                            "Phranakhonsiayutthaya":78, "Sukhothai":427, "Uthaithani":222, "Phichit":349, \
                            "Phitsanulok":379, "Phetchabun":375, "Lopburi":180, "Samutprakan":26, "Samutsongkhram":38, \
                            "Chanthaburi":254, "Chachoengsao":85, "Chonburi":100, "Trat":322, "Prachinburi":136, \
                            "Rayong":187, "Sakaeo":210, "Kanchanaburi":121, "Tak":426, "Prachuapkhirikhan":284, \
                            "Phetchaburi":127, "Ratchaburi":102, "Krabi":801, "Chumphon":456, "Trang":852, \
                            "Nakhonsithammarat":799, "Narathiwat":1135, "Pattani":1046, "Phangnga":802, \
                            "Phatthalung":868, "Phuket":908, "Yala":1100, "Ranong":572, "Songkhla":984, \
                            "Satun":981, "Suratthani":637}
        end = lis_provinces[self.province]
        return end
    def print_oil(self):
        '''return price of fule'''
        price_fuel = 0
        if self.oil in ['NGV','LPG','Diesel'] and self.car == 'Motorcycles':
            price_fuel = '!!!Mistake!!!'
        else:
            price_fuel = self.price_oil
        return price_fuel
    def print_car(self):
        '''return rate of fule that your car use'''
        lis_transport = {'Motorcycles':22, 'Midsize car':15.5, 'Pickups':11.5, \
                          'Truck 6 wheel':10.5, 'Truck 10 wheel':9}
        transport = lis_transport[self.car]
        your_car = 0
        if self.oil == 'NGV' and self.car != 'Motorcycles':
            your_car = 10.00
        elif self.oil == 'LPG' and self.car != 'Motorcycles':
            your_car = 12.50
        elif self.oil in ['NGV','LPG','Diesel'] and self.car == 'Motorcycles':
            your_car = '!!!Mistake!!!'
        else:
            your_car = transport
        return your_car
    def print_use(self):
        '''return amount of fule that your car use'''
        amount_used = 0
        if self.oil in ['NGV','LPG','Diesel'] and self.car == 'Motorcycles':
            amount_used = '!!!Mistake!!!'
        else:
            amount_used = Price.print_dist(self) / Price.print_car(self)
        return amount_used
    def print_pay(self):
        '''return the cost of fule this you will pay'''
        total = 0
        if self.oil in ['NGV', 'LPG', 'Diesel'] and self.car == 'Motorcycles':
            total='!!!Mistake!!!'
        else:
            total = Price.print_use(self) * Price.print_oil(self)
        return total
Window()
